{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">Tilt</variable><variable type=\"boolean\" id=\")h?FzVWirc56#CGjvH-:\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">StatusOn</variable><variable type=\"boolean\" id=\"!(WkjnbCw8JotH,R)|)s\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">clawup</variable></variables><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"110\"><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"eVI6d+lU0HNdc$a+mWt7\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"Tnv;m:?Z,]QUNk|lgSB?\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_stopping\" id=\"{}32YuL?K7]xq1K8|Myj\"><field name=\"MODE\">brake</field><next><block type=\"v5_motion_set_motor_stopping\" id=\"ExnY:CSVSP|[ecq{jE-_\"><field name=\"MOTOR\">lift</field><field name=\"MODE\">hold</field><next><block type=\"v5_motion_set_motor_velocity\" id=\"u#55Q.+n6ayYAbeK7hr#\"><field name=\"MOTOR\">Intake</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"iaY(68xPX`DK9xbu;=9s\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_sensing_set_digital_out\" id=\"|{;tdI;]NYT`EPS~-BT_\"><field name=\"DIGITALOUT\">RightTilt</field><field name=\"STATE\">low</field><next><block type=\"v5_sensing_set_digital_out\" id=\",}/XxSK%p;T#l*wM[WNF\"><field name=\"DIGITALOUT\">LeftTilt</field><field name=\"STATE\">low</field><next><block type=\"v5_sensing_set_digital_out\" id=\"vt5~/8#^?CsXv2JV?o]^\"><field name=\"DIGITALOUT\">Claw</field><field name=\"STATE\">high</field><next><block type=\"v5_variables_set_boolean_variable\" id=\"AN}tHslKRWBqVM-$ewu+\"><field name=\"VARIABLE\" id=\")h?FzVWirc56#CGjvH-:\" variabletype=\"boolean\">StatusOn</field><value name=\"VALUE\"><shadow type=\"bool_input\" id=\"9u(-LmOTJ,|o^Sp}8N7L\"><field name=\"VALUE\">true</field></shadow></value><next><block type=\"v5_variables_set_boolean_variable\" id=\"_tEx1p;k#1D_;}R]Nj)M\"><field name=\"VARIABLE\" id=\"!(WkjnbCw8JotH,R)|)s\" variabletype=\"boolean\">clawup</field><value name=\"VALUE\"><shadow type=\"bool_input\" id=\"d5fFobYY{!q_HnU1NeQ#\"><field name=\"VALUE\">true</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_controller_button\" id=\"#54sng6T0nq.$wTzrtnm\" x=\"510\" y=\"230\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_control_if_then_else\" id=\"jWT$tk66Do^`X2%1:sWf\"><value name=\"CONDITION\"><block type=\"v5_variables_boolean_variable\" id=\"|Yd^XX$X2lCiwJ`~zV[Z\"><field name=\"VARIABLE\" id=\")h?FzVWirc56#CGjvH-:\" variabletype=\"boolean\">StatusOn</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_sensing_set_digital_out\" id=\"eBfyv9:MnrLes_BF,UI;\"><field name=\"DIGITALOUT\">LeftTilt</field><field name=\"STATE\">high</field><next><block type=\"v5_sensing_set_digital_out\" id=\"_rExim*XKw26%Q6X}6dn\"><field name=\"DIGITALOUT\">RightTilt</field><field name=\"STATE\">high</field><next><block type=\"v5_variables_set_boolean_variable\" id=\"cl,F%mG=dS?2Oec+8^/n\"><field name=\"VARIABLE\" id=\")h?FzVWirc56#CGjvH-:\" variabletype=\"boolean\">StatusOn</field><value name=\"VALUE\"><shadow type=\"bool_input\" id=\"+Ii~S(.KuZJ_w.sry8qQ\"><field name=\"VALUE\">false</field></shadow></value></block></next></block></next></block></statement><statement name=\"SUBSTACK2\"><block type=\"v5_sensing_set_digital_out\" id=\";TPw^?H2Y*4,43_%yp!9\"><field name=\"DIGITALOUT\">LeftTilt</field><field name=\"STATE\">low</field><next><block type=\"v5_sensing_set_digital_out\" id=\"-wr/zn3(%E50q{WW$WOu\"><field name=\"DIGITALOUT\">RightTilt</field><field name=\"STATE\">low</field><next><block type=\"v5_variables_set_boolean_variable\" id=\"oH4g2[({%1Z19z4@g/zt\"><field name=\"VARIABLE\" id=\")h?FzVWirc56#CGjvH-:\" variabletype=\"boolean\">StatusOn</field><value name=\"VALUE\"><shadow type=\"bool_input\" id=\"=n!JJ2$-bRmQ5/-LsCvv\"><field name=\"VALUE\">true</field></shadow></value></block></next></block></next></block></statement></block></next></block><block type=\"v5_events_when_autonomous\" id=\"!gs)a=zm*scfQYEQvyd;\" x=\"70\" y=\"650\"><next><block type=\"v5_drivetrain_drive_for\" id=\"JwPC$f;-TV*tUwrR#n8~\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"jRm!X(WGbz.Cp|12F*}3\"><field name=\"NUM\">200</field></shadow></value><next><block type=\"v5_motion_spin_for\" id=\":}mb9Tg;yu1d|q(%YFyO\"><field name=\"MOTOR\">Intake</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">rev</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"(xgXuC}e^7[n(40)g4Z`\"><field name=\"NUM\">5</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"k3HX%03BaqTCz9]F_Sy|\"><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"*8u3ScVgza#-D@EVbfWI\"><field name=\"NUM\">200</field></shadow></value><next><block type=\"v5_drivetrain_turn_for\" id=\":FhPLurUVza93`,u56%5\"><field name=\"TURNDIRECTION\">left</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"r1nOK{b!mOn==~@{CG=#\"><field name=\"NUM\">90</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"R6%5u8ev-T9!KGs5gp//\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"pFp;AN_ir}*.l]iXO*J;\"><field name=\"NUM\">200</field></shadow></value><next><block type=\"v5_drivetrain_turn_for\" id=\"dNkYG1%9[XhB2V9D{/b*\"><field name=\"TURNDIRECTION\">right</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"XF(k1VcR(C=UdkDw=*%v\"><field name=\"NUM\">90</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"pn2mK%/1YnX8D_gp{7p*\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"cs3{DbEOfSM)bri1hW3J\"><field name=\"NUM\">50</field></shadow></value><next><block type=\"v5_drivetrain_turn_for\" id=\"YN]htrebp:H;!D.$X!ik\"><field name=\"TURNDIRECTION\">right</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"^)7fJC1iC}QaxDKtPnBF\"><field name=\"NUM\">90</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"8#@(|Z*p|Z+4etqN=#eM\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"}X!r[ZN0oKtyt,KVuzS1\"><field name=\"NUM\">200</field></shadow></value><next><block type=\"v5_sensing_set_digital_out\" id=\"G;U3c*N%Qv01fV$192cZ\"><field name=\"DIGITALOUT\">Claw</field><field name=\"STATE\">low</field><next><block type=\"v5_motion_spin_for\" id=\"uOPzJtYnUw:BZ^:~qn#+\"><field name=\"MOTOR\">Intake</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">rev</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"O)=,_+~Ew]$tRVI-gl:5\"><field name=\"NUM\">5</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_controller_button\" id=\"#72FptdQB8??R%OgA7@6\" x=\"590\" y=\"750\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonLeft</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_control_if_then_else\" id=\"yc6=}nnrKS*d/wx${^=(\"><value name=\"CONDITION\"><block type=\"v5_variables_boolean_variable\" id=\"hzCtu{uS#phh2#)9pn;_\"><field name=\"VARIABLE\" id=\"!(WkjnbCw8JotH,R)|)s\" variabletype=\"boolean\">clawup</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_sensing_set_digital_out\" id=\"[irejtxJQ^Tl=BQh68p(\"><field name=\"DIGITALOUT\">Claw</field><field name=\"STATE\">high</field><next><block type=\"v5_variables_set_boolean_variable\" id=\"k:]ljHEHw]1.,zZ2J|iJ\"><field name=\"VARIABLE\" id=\"!(WkjnbCw8JotH,R)|)s\" variabletype=\"boolean\">clawup</field><value name=\"VALUE\"><shadow type=\"bool_input\" id=\"G*,Q|@Uc_[PlKUOBZD){\"><field name=\"VALUE\">false</field></shadow></value></block></next></block></statement><statement name=\"SUBSTACK2\"><block type=\"v5_sensing_set_digital_out\" id=\"mP/@),Iy9q}no([4,?bG\"><field name=\"DIGITALOUT\">Claw</field><field name=\"STATE\">low</field><next><block type=\"v5_variables_set_boolean_variable\" id=\"R6FHd-[4e1)*BYSIS1k_\"><field name=\"VARIABLE\" id=\"!(WkjnbCw8JotH,R)|)s\" variabletype=\"boolean\">clawup</field><value name=\"VALUE\"><shadow type=\"bool_input\" id=\"Hajx8^P?(A/4b_I7_eY}\"><field name=\"VALUE\">true</field></shadow></value></block></next></block></statement></block></next></block></xml>","rconfig":[{"port":[11,13,18,19,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"rev","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Intake","leftDir":"false","right":"lift","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[2],"name":"lift","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[16],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[2],"name":"LeftTilt","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[4],"name":"RightTilt","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[1],"name":"Claw","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20210708.10.00.00","appVersion":"2.2.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT11, ratio18_1, true);\nmotor leftMotorB = motor(PORT13, ratio18_1, true);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT18, ratio18_1, false);\nmotor rightMotorB = motor(PORT19, ratio18_1, false);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\ncontroller Controller1 = controller(primary);\nmotor lift = motor(PORT2, ratio36_1, true);\n\nmotor Intake = motor(PORT16, ratio18_1, false);\n\ndigital_out LeftTilt = digital_out(Brain.ThreeWirePort.B);\ndigital_out RightTilt = digital_out(Brain.ThreeWirePort.D);\ndigital_out Claw = digital_out(Brain.ThreeWirePort.A);\n\n\n\n// Generated code.\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonL1/ButtonL2 status to control Intake\n      if (Controller1.ButtonL1.pressing()) {\n        Intake.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        Intake.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        Intake.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control lift\n      if (Controller1.ButtonR1.pressing()) {\n        lift.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        lift.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        lift.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nfloat Tilt;\n\nbool StatusOn, clawup;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Drivetrain.setStopping(brake);\n  lift.setStopping(hold);\n  Intake.setVelocity(100.0, percent);\n  RightTilt.set(false);\n  LeftTilt.set(false);\n  Claw.set(true);\n  StatusOn = true;\n  clawup = true;\n  return 0;\n}\n\n// \"when Controller1 ButtonUp pressed\" hat block\nvoid onevent_Controller1ButtonUp_pressed_0() {\n  if (StatusOn) {\n    LeftTilt.set(true);\n    RightTilt.set(true);\n    StatusOn = false;\n  }\n  else {\n    LeftTilt.set(false);\n    RightTilt.set(false);\n    StatusOn = true;\n  }\n}\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  Drivetrain.driveFor(forward, 200.0, mm, true);\n  Intake.spinFor(forward, 5.0, turns, true);\n  Drivetrain.driveFor(reverse, 200.0, mm, true);\n  Drivetrain.turnFor(left, 90.0, degrees, true);\n  Drivetrain.driveFor(forward, 200.0, mm, true);\n  Drivetrain.turnFor(right, 90.0, degrees, true);\n  Drivetrain.driveFor(forward, 50.0, inches, true);\n  Drivetrain.turnFor(right, 90.0, degrees, true);\n  Drivetrain.driveFor(forward, 200.0, mm, true);\n  Claw.set(false);\n  Intake.spinFor(forward, 5.0, turns, true);\n  return 0;\n}\n\n// \"when Controller1 ButtonLeft pressed\" hat block\nvoid onevent_Controller1ButtonLeft_pressed_0() {\n  if (clawup) {\n    Claw.set(true);\n    clawup = false;\n  }\n  else {\n    Claw.set(false);\n    clawup = true;\n  }\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n\n\n  task rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // register event handlers\n  Controller1.ButtonUp.pressed(onevent_Controller1ButtonUp_pressed_0);\n  Controller1.ButtonLeft.pressed(onevent_Controller1ButtonLeft_pressed_0);\n\n  wait(15, msec);\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}